import java.time.LocalDate;
import java.util.*;

class Booking {
    private String bookingId;
    private Passenger passenger;
    private Flight flight;
    private String status;

    public Booking(String bookingId, Passenger passenger, Flight flight, String status) {
        this.bookingId = bookingId;
        this.passenger = passenger;
        this.flight = flight;
        this.status = status;
    }

    // Getters
    public String getBookingId(){ 
        return bookingId; 
    }
    public Passenger getPassenger(){ 
        return passenger; 
    }
    public Flight getFlight(){ 
        return flight; 
    }
    public String getStatus(){ 
        return status; 
    }

    // Setter for status
    public void setStatus(String status){ 
        this.status = status; 
    }
}

class Passenger {
    private String name;
    private String passportNumber;

    public Passenger(String name, String passportNumber) {
        this.name = name;
        this.passportNumber = passportNumber;
    }

    public String getName(){ 
        return name; 
    }
    public void setName(String name){ 
        this.name = name; 
    }
    public String getPassportNumber(){ 
        return passportNumber; 
    }
    public void setPassportNumber(String passportNumber){ 
        this.passportNumber = passportNumber; 
    }
}

class Flight {
    private int flightId;
    private LocalDate date;
    private int totalSeats;
    private List<Booking> confirmedBookings;
    private Queue<Booking> waitingList;

    public Flight(int flightId, LocalDate date, int totalSeats) {
        this.flightId = flightId;
        this.date = date;
        this.totalSeats = totalSeats;
        this.confirmedBookings = new ArrayList<>();
        this.waitingList = new LinkedList<>();
    }

    public int getFlightId(){
        return flightId; 
    }
    public LocalDate getDate() { return date; }
    public int getAvailableSeats() { return totalSeats - confirmedBookings.size(); }
    
    public Booking bookTicket(Passenger passenger, String bookingId) {
        Booking booking;
        if (confirmedBookings.size() < totalSeats) {
            booking = new Booking(bookingId, passenger, this, "Confirmed");
            confirmedBookings.add(booking);
        } else {
            booking = new Booking(bookingId, passenger, this, "Waiting List");
            waitingList.add(booking);
        }
        return booking;
    }

    public Booking findBookingById(String bookingId) {
        // Check confirmed bookings
        for (Booking booking : confirmedBookings) {
            if (booking.getBookingId().equals(bookingId)) {
                return booking;
            }
        }

        // Check waiting list
        for (Booking booking : waitingList) {
            if (booking.getBookingId().equals(bookingId)) {
                return booking;
            }
        }

        return null;
    }

    public Booking cancelBooking(String bookingId) {
        Booking cancelledBooking = findBookingById(bookingId);
        
        if (cancelledBooking != null) {
            // Remove from confirmed or waiting list
            confirmedBookings.remove(cancelledBooking);
            waitingList.remove(cancelledBooking);

            // Move first waiting list booking to confirmed if available
            if (!waitingList.isEmpty()) {
                Booking nextBooking = waitingList.poll();
                nextBooking.setStatus("Confirmed");
                confirmedBookings.add(nextBooking);
                return nextBooking;
            }
        }

        return null;
    }

    public List<Booking> getConfirmedBookings() { return confirmedBookings; }
    public Queue<Booking> getWaitingList(){ return waitingList; }
}

class FlightBookingSystem {
    private Map<Integer, Flight> flights;
    private Scanner scanner;
    private Map<String, Booking> allBookings;
    private int bookingCounter;

    public FlightBookingSystem() {
        flights = new HashMap<>();
        scanner = new Scanner(System.in);
        allBookings = new HashMap<>();
        bookingCounter = 1000; // Start booking IDs from 1000

        // Predefined flights
        flights.put(101, new Flight(101, LocalDate.of(2024, 11, 20), 10));
        flights.put(102, new Flight(102, LocalDate.of(2024, 11, 22), 0));
        flights.put(103, new Flight(103, LocalDate.of(2024, 11, 24), 5));
    }

    private String generateBookingId() {
        return "B" + (++bookingCounter);
    }

    public void run() {
        while (true) {
            displayMenu();
            int choice = scanner.nextInt();
            scanner.nextLine(); // Consume newline

            switch (choice) {
                case 1:
                    searchFlights();
                    break;
                case 2:
                    bookTicket();
                    break;
                case 3:
                    editTicketInformation();
                    break;
                case 4:
                    viewTicketStatus();
                    break;
                case 5:
                    cancelTicket();
                    break;
                case 6:
                    System.out.println("Exiting the Flight Booking System. Thank you!");
                    return;
                default:
                    System.out.println("Invalid choice. Please try again.");
            }
        }
    }

    private void displayMenu() {
        System.out.println("\n======================");
        System.out.println("FLIGHT TICKET BOOKING SYSTEM");
        System.out.println("======================");
        System.out.println("Welcome to the Flight Booking System!");
        System.out.println("1. Search Flights");
        System.out.println("2. Book a Ticket");
        System.out.println("3. Edit Ticket Information");
        System.out.println("4. View Ticket Status");
        System.out.println("5. Cancel Ticket");
        System.out.println("6. Exit");
        System.out.print("Enter your choice (1-6): ");
    }

    private void searchFlights() {
        System.out.println("------------------------");
        System.out.println("Search Flights (Enter a week range, e.g., 19th November 2024 – 25th November 2024):");
        System.out.print("Enter start date (YYYY-MM-DD): ");
        String startDateStr = scanner.nextLine();
        System.out.print("Enter end date (YYYY-MM-DD): ");
        String endDateStr = scanner.nextLine();

        System.out.println("Flights available from 19th November 2024 – 25th November 2024:");
        for (Flight flight : flights.values()) {
            System.out.printf("Flight ID: %d | Date: %s | Available Seats: %d\n", 
                flight.getFlightId(), flight.getDate(), 
                flight.getAvailableSeats() > 0 ? flight.getAvailableSeats() : 0);
        }
    }

    private void bookTicket() {
        System.out.println("------------------------");
        System.out.print("Enter the Flight ID to book a ticket: ");
        int flightId = scanner.nextInt();
        scanner.nextLine(); // Consume newline

        Flight selectedFlight = flights.get(flightId);
        if (selectedFlight == null) {
            System.out.println("Invalid Flight ID.");
            return;
        }

        System.out.println("------------------------");
        System.out.printf("Booking a ticket for Flight ID: %d\n", flightId);
        System.out.print("Enter passenger name: ");
        String name = scanner.nextLine();
        System.out.print("Enter passport number: ");
        String passportNumber = scanner.nextLine();

        // Generate unique booking ID
        String bookingId = generateBookingId();

        Passenger passenger = new Passenger(name, passportNumber);
        Booking booking = selectedFlight.bookTicket(passenger, bookingId);

        if (booking.getStatus().equals("Confirmed")) {
            System.out.printf("Ticket booked successfully for %s on Flight %d.\n", name, flightId);
            System.out.println("Status: Confirmed");
            System.out.println("Your Booking ID is: " + bookingId);
            // Store booking in central bookings map
            allBookings.put(bookingId, booking);
        } else {
            System.out.printf("Flight %d is fully booked. Adding %s to the waiting list.\n", flightId, name);
            System.out.println("Your Booking ID is: " + bookingId);
            // Store booking in central bookings map
            allBookings.put(bookingId, booking);
        }

        System.out.print("Would you like to make another booking? (y/n): ");
        String continueBooking = scanner.nextLine();
        if (continueBooking.equalsIgnoreCase("y")) {
            bookTicket();
        }
    }

    private void viewTicketStatus() {
        System.out.println("------------------------");
        System.out.print("Enter your Booking ID to view ticket status: ");
        String bookingId = scanner.nextLine();

        Booking booking = allBookings.get(bookingId);
        if (booking != null) {
            System.out.println("Ticket Information:");
            System.out.println("Booking ID: " + booking.getBookingId());
            System.out.println("Passenger Name: " + booking.getPassenger().getName());
            System.out.println("Flight ID: " + booking.getFlight().getFlightId());
            System.out.println("Date: " + booking.getFlight().getDate());
            System.out.println("Status: " + booking.getStatus());
        } else {
            System.out.println("No ticket found for this Booking ID.");
        }
    }

    private void cancelTicket() {
        System.out.println("------------------------");
        System.out.print("Enter your Booking ID to cancel the ticket: ");
        String bookingId = scanner.nextLine();

        Booking booking = allBookings.get(bookingId);
        if (booking != null) {
            Flight flight = booking.getFlight();
            Booking nextBooking = flight.cancelBooking(bookingId);

            System.out.printf("Ticket for %s on Flight %d is canceled.\n", 
                booking.getPassenger().getName(), flight.getFlightId());
            
            if (nextBooking != null) {
                System.out.println("Checking waiting list for Flight " + flight.getFlightId() + "...");
                System.out.println("First person on waiting list: " + nextBooking.getPassenger().getName());
                System.out.println("Adding " + nextBooking.getPassenger().getName() + " to the confirmed list for Flight " + flight.getFlightId() + ".");
                System.out.println("Ticket successfully moved to confirmed for " + nextBooking.getPassenger().getName() + ".");
            }
        } else {
            System.out.println("No ticket found for this Booking ID.");
        }
    }

    private void editTicketInformation() {
        System.out.println("------------------------");
        System.out.print("Enter your Booking ID to edit ticket information: ");
        String bookingId = scanner.nextLine();

        Booking booking = allBookings.get(bookingId);
        if (booking != null) {
            System.out.print("Enter new passenger name (press enter to skip): ");
            String newName = scanner.nextLine();
            System.out.print("Enter new passport number (press enter to skip): ");
            String newPassportNumber = scanner.nextLine();

            if (!newName.isEmpty()) {
                booking.getPassenger().setName(newName);
            }
            if (!newPassportNumber.isEmpty()) {
                booking.getPassenger().setPassportNumber(newPassportNumber);
            }

            System.out.println("Ticket information updated successfully.");
        } else {
            System.out.println("No ticket found for this Booking ID.");
        }
    }

    public static void main(String[] args) {
        FlightBookingSystem bookingSystem = new FlightBookingSystem();
        bookingSystem.run();
    }
}
